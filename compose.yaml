x-frappe-app-image: &frappe-app-image ghcr.io/frappe/lms:stable
x-frappe-app-common: &frappe-app-common
  image: *frappe-app-image
  platform: linux/amd64
  pull_policy: missing
  volumes:
    - sites:/home/frappe/frappe-bench/sites
x-depends-on-configurator:
  depends_on:
    configurator:
      condition: service_completed_successfully

services:
  caddy:
    image: caddy:2.8
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy-data:/data
      - caddy-config:/config
    command: caddy run --config /dev/stdin
    configs:
      - source: caddy-config-file
        target: /dev/stdin
    networks:
      default: null
    depends_on:
      frontend:
        condition: service_healthy

  backend:
    <<: *frappe-app-common
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    networks:
      default: null
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - '0.0.0.0:8000'
      interval: 2s
      timeout: 10s
      retries: 30

  db:
    command:
      - '--character-set-server=utf8mb4'
      - '--collation-server=utf8mb4_unicode_ci'
      - '--skip-character-set-client-handshake'
      - '--skip-innodb-read-only-compressed'
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    healthcheck:
      test:
        - CMD-SHELL
        - 'mysqladmin ping -h localhost --password=${MYSQL_ROOT_PASSWORD}'
      interval: 1s
      retries: 20
    image: 'mariadb:10.6'
    networks:
      default: null
    volumes:
      - db-data:/var/lib/mysql

  redis-cache:
    image: 'redis:6.2-alpine'
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      default: null
    volumes:
      - redis-cache-data:/data

  redis-queue:
    image: 'redis:6.2-alpine'
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      default: null
    volumes:
      - redis-queue-data:/data

  configurator:
    <<: *frappe-app-common
    restart: 'no'
    exclude_from_hc: true
    command:
      - |
        ls -1 apps > sites/apps.txt; bench set-config -g db_host $$DB_HOST; bench set-config -gp db_port $$DB_PORT; bench set-config -g redis_cache "redis://$$REDIS_CACHE"; bench set-config -g redis_queue "redis://$$REDIS_QUEUE"; bench set-config -g redis_socketio "redis://$$REDIS_QUEUE"; bench set-config -gp socketio_port $$SOCKETIO_PORT;
    depends_on:
      db:
        condition: service_healthy
        required: true
      redis-cache:
        condition: service_started
        required: true
      redis-queue:
        condition: service_started
        required: true
    entrypoint:
      - bash
      - '-c'
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: '${DB_PORT}'
      REDIS_CACHE: '${REDIS_CACHE}'
      REDIS_QUEUE: '${REDIS_QUEUE}'
      SOCKETIO_PORT: '${SOCKETIO_PORT}'
    networks:
      default: null

  scheduler:
    <<: *frappe-app-common
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - '${REDIS_QUEUE}'
      interval: 2s
      timeout: 10s
      retries: 30
    command:
      - bench
      - schedule
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    labels:
      - ofelia.enabled=true
      - 'ofelia.job-exec.datecron.command="bench --site all backup"'
      - "ofelia.job-exec.datecron.schedule='@every 6h'"
      - ofelia.job-exec.datecron.user=frappe
    networks:
      default: null

  queue-long:
    <<: *frappe-app-common
    command:
      - bench
      - worker
      - '--queue'
      - 'long,default,short'
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - '${REDIS_QUEUE}'
      interval: 2s
      timeout: 10s
      retries: 30
    networks:
      default: null

  queue-short:
    <<: *frappe-app-common
    command:
      - bench
      - worker
      - '--queue'
      - 'short,default'
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - '${REDIS_QUEUE}'
      interval: 2s
      timeout: 10s
      retries: 30
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    networks:
      default: null

  websocket:
    <<: *frappe-app-common
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - '0.0.0.0:9000'
      interval: 2s
      timeout: 10s
      retries: 30
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    networks:
      default: null
    environment:
      - FRAPPE_SITE=${FRAPPE_SITE}

  frontend:
    <<: *frappe-app-common
    command:
      - nginx-entrypoint.sh
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - '0.0.0.0:8080'
      interval: 2s
      timeout: 10s
      retries: 30
    depends_on:
      backend:
        condition: service_started
        required: true
      websocket:
        condition: service_started
        required: true
    environment:
      - SERVICE_FQDN_FRAPPESITE=${SERVICE_FQDN_FRAPPESITE}
      - BACKEND=${BACKEND}
      - CLIENT_MAX_BODY_SIZE=${CLIENT_MAX_BODY_SIZE}
      - FRAPPE_SITE_NAME_HEADER=${FRAPPE_SITE_NAME_HEADER}
      - PROXY_READ_TIMEOUT=${PROXY_READ_TIMEOUT}
      - SOCKETIO=${SOCKETIO}
      - UPSTREAM_REAL_IP_ADDRESS=${UPSTREAM_REAL_IP_ADDRESS}
      - UPSTREAM_REAL_IP_HEADER=${UPSTREAM_REAL_IP_HEADER}
      - UPSTREAM_REAL_IP_RECURSIVE=${UPSTREAM_REAL_IP_RECURSIVE}
    networks:
      default: null

  create-site:
    <<: *frappe-app-common
    exclude_from_hc: true
    restart: 'no'
    environment:
      ADMIN_PASS: ${ADMIN_PASS}
    networks:
      default: null
    deploy:
      restart_policy:
        condition: none
    volumes:
      - 'sites:/home/frappe/frappe-bench/sites'
      - 'logs:/home/frappe/frappe-bench/logs'
    entrypoint:
      - bash
      - '-c'
    command:
      - |
        wait-for-it -t 120 db:3306; wait-for-it -t 120 redis-cache:6379; wait-for-it -t 120 redis-queue:6379; export start=`date +%s`; until [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".db_host // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_cache // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_queue // empty"` ]];
        do
          echo "Waiting for sites/common_site_config.json to be created";
          sleep 5;
          if (( `date +%s`-start > 120 )); then
            echo "could not find sites/common_site_config.json with required keys";
            exit 1
          fi
        done; echo "sites/common_site_config.json found"; bench new-site --mariadb-user-host-login-scope='%' --admin-password=$$ADMIN_PASS --db-root-username=root --db-root-password=${MYSQL_ROOT_PASSWORD} --set-default ${FRAPPE_SITE};

  migrate-site:
    <<: *frappe-app-common
    exclude_from_hc: true
    restart: 'no'
    networks:
      default: null
    environment:
      - FRAPPE_HOST_NAME=${FRAPPE_HOST_NAME}
    volumes:
      - 'sites:/home/frappe/frappe-bench/sites'
      - 'logs:/home/frappe/frappe-bench/logs'
    entrypoint:
      - bash
      - '-c'
    command:
      - |
        curl -f http://frontend:8080/api/method/ping || exit 0;
        bench --site all set-config maintenance_mode 1;
        bench --site all set-config pause_scheduler 1;
        bench --site all migrate;
        bench --site all set-config maintenance_mode 0;
        bench --site all set-config pause_scheduler 0;
        bench --site ${FRAPPE_SITE} set-config host_name $$FRAPPE_HOST_NAME;

configs:
  caddy-config-file:
    content: |
      ${SERVICE_URL_FRAPPESITE} {
          reverse_proxy frontend:8080
      }

volumes:
  db-data:
  redis-cache-data:
  redis-queue-data:
  sites:
  logs:
  caddy-data:
  caddy-config:

networks:
  default:
    driver: bridge
